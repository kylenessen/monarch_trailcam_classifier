
## Prep monarch count data
Here I am loading in the available count data so far. SC1 and SC2 are the only deployments with a 5 minute interval, so I am removing every other row initially to get it to 10 mins. Then I append SC4, which is more typical. 
```{r}
library(tidyverse)

data_directory <- "data/"
csv_files <- c("SC1.csv", "SC2.csv") # Load the 5 min interval datasets

df <- csv_files %>%
    map_df(~ read_csv(file.path(data_directory, .))) %>%
    mutate(time = ymd_hms(timestamp, tz = "America/Los_Angeles")) %>%
    arrange(deployment_id, time) %>%
    group_by(deployment_id) %>%
    filter(row_number() %% 2 == 1) %>% # Keep every other row (odd numbered rows)
    ungroup() %>%
    as_tibble()

# Read SC4 data and process it similarly to the other files
SC4 <- read.csv("data/SC4.csv") %>%
    mutate(time = ymd_hms(timestamp, tz = "America/Los_Angeles")) %>%
    as_tibble()

# Combine all data
df <- bind_rows(df, SC4) %>%
    arrange(deployment_id, time)
```
## Generate the subsampled datasets
Here I split out the original df into my test dataset. I'm going to go with 10, 20, 30, 60, 90, and 120 minutes. They will be named accordingly. 

```{r}
# 10 minutes (keep all rows)
df10 <- df

# 20 minutes (keep every other row)
df20 <- df %>%
  group_by(deployment_id) %>%
  filter(row_number() %% 2 == 1) %>%
  ungroup()

# 30 minutes (keep every third row)
df30 <- df %>%
  group_by(deployment_id) %>%
  filter(row_number() %% 3 == 1) %>%
  ungroup()

# 60 minutes (keep every sixth row)
df60 <- df %>%
  group_by(deployment_id) %>%
  filter(row_number() %% 6 == 1) %>%
  ungroup()

# 90 minutes (keep every ninth row)
df90 <- df %>%
  group_by(deployment_id) %>%
  filter(row_number() %% 9 == 1) %>%
  ungroup()

# 120 minutes (keep every twelfth row)
df120 <- df %>%
  group_by(deployment_id) %>%
  filter(row_number() %% 12 == 1) %>%
  ungroup()
```

## Calculate change in monarch counts for each dataset
Here I define a function to calculate the change in monarch butterfly abundance and then apply it to all of my datasets

```{r}
# Function to calculate monarch count changes
calculate_monarch_changes <- function(df) {
  df %>%
    arrange(deployment_id, time) %>%
    group_by(deployment_id) %>%
    mutate(
      prev_count = lag(count),
      monarch_change = count - prev_count,
      time_diff_minutes = as.numeric(difftime(time, lag(time), units = "mins"))
    ) %>%
    ungroup()
}

# Apply the function to each dataset
df10 <- calculate_monarch_changes(df10)
df20 <- calculate_monarch_changes(df20)
df30 <- calculate_monarch_changes(df30)
df60 <- calculate_monarch_changes(df60)
df90 <- calculate_monarch_changes(df90)
df120 <- calculate_monarch_changes(df120)
```



```{r}
wind <- read_csv("https://raw.githubusercontent.com/kylenessen/masters-wind-data/main/vsfb/vsfb_wind_data.csv")

# Add wind data summaries between observation intervals
df_with_intervals <- df %>%
    arrange(deployment_id, time) %>%
    group_by(deployment_id) %>%
    mutate(
        interval_end = time,
        interval_start = lag(time)
    ) %>%
    ungroup()

# Function to summarize wind data between intervals
summarize_wind <- function(deploy_id, start_time, end_time) {
    if (is.na(start_time)) {
        return(tibble(
            avg_wind_speed_mph = NA_real_,
            avg_wind_gust_mph = NA_real_,
            max_wind_gust_mph = NA_real_,
            n_wind_obs = 0L
        ))
    }

    wind_interval <- wind %>%
        filter(
            deployment_id == deploy_id,
            time >= start_time,
            time <= end_time
        )

    if (nrow(wind_interval) == 0) {
        return(tibble(
            avg_wind_speed_mph = NA_real_,
            avg_wind_gust_mph = NA_real_,
            max_wind_gust_mph = NA_real_,
            n_wind_obs = 0L
        ))
    }

    wind_interval %>%
        summarize(
            avg_wind_speed_mph = mean(speed_mph, na.rm = TRUE),
            avg_wind_gust_mph = mean(gust_mph, na.rm = TRUE),
            max_wind_gust_mph = max(gust_mph, na.rm = TRUE),
            n_wind_obs = n()
        )
}

# Apply wind summarization to each interval
wind_summaries <- pmap_dfr(
    list(
        deploy_id = df_with_intervals$deployment_id,
        start_time = df_with_intervals$interval_start,
        end_time = df_with_intervals$interval_end
    ),
    summarize_wind
)

# Add the wind summaries to the original data frame
df_with_wind <- bind_cols(df_with_intervals, wind_summaries)

